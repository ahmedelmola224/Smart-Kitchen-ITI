
FireAlarmNode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000079c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000079c  00000830  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800080  00800080  00000850  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000880  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002091  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c71  00000000  00000000  00002b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ed1  00000000  00000000  000037de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000460  00000000  00000000  000046b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088e  00000000  00000000  00004b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013a2  00000000  00000000  0000539e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00006740  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 49 03 	jmp	0x692	; 0x692 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 05 03 	call	0x60a	; 0x60a <main>
  8a:	0c 94 cc 03 	jmp	0x798	; 0x798 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:

static u8 ADC_flag=1;
void ADC_Init(ADC_VoltRef_type ref,ADC_Prescaler_type scaler)
{
	//prescaler
	ADCSRA=ADCSRA&0xF8; //11111000
  92:	96 b1       	in	r25, 0x06	; 6
  94:	98 7f       	andi	r25, 0xF8	; 248
  96:	96 b9       	out	0x06, r25	; 6
	scaler=scaler&0x07; //00000111
  98:	67 70       	andi	r22, 0x07	; 7
	ADCSRA=ADCSRA|scaler;
  9a:	96 b1       	in	r25, 0x06	; 6
  9c:	69 2b       	or	r22, r25
  9e:	66 b9       	out	0x06, r22	; 6
	
	/*ref*/
	switch(ref)
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	59 f0       	breq	.+22     	; 0xba <ADC_Init+0x28>
  a4:	18 f0       	brcs	.+6      	; 0xac <ADC_Init+0x1a>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	79 f0       	breq	.+30     	; 0xc8 <ADC_Init+0x36>
  aa:	14 c0       	rjmp	.+40     	; 0xd4 <ADC_Init+0x42>
	{
		case VREF_AREF:
		CLR_BIT(ADMUX,REFS0);
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	8f 7b       	andi	r24, 0xBF	; 191
  b0:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX,REFS1);
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	87 b9       	out	0x07, r24	; 7
		break;
  b8:	0d c0       	rjmp	.+26     	; 0xd4 <ADC_Init+0x42>
		case VREF_VCC:
		SET_BIT(ADMUX,REFS0);
  ba:	87 b1       	in	r24, 0x07	; 7
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX,REFS1);
  c0:	87 b1       	in	r24, 0x07	; 7
  c2:	8f 77       	andi	r24, 0x7F	; 127
  c4:	87 b9       	out	0x07, r24	; 7
		break;
  c6:	06 c0       	rjmp	.+12     	; 0xd4 <ADC_Init+0x42>
		case VREF_256:
		SET_BIT(ADMUX,REFS0);
  c8:	87 b1       	in	r24, 0x07	; 7
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX,REFS1);
  ce:	87 b1       	in	r24, 0x07	; 7
  d0:	80 68       	ori	r24, 0x80	; 128
  d2:	87 b9       	out	0x07, r24	; 7
		break;
		
	}
	
	/*enable*/
	SET_BIT(ADCSRA,ADEN);
  d4:	86 b1       	in	r24, 0x06	; 6
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	86 b9       	out	0x06, r24	; 6
  da:	08 95       	ret

000000dc <ADC_Read>:

u16 ADC_Read(ADC_Channel_type ch)
{
	u16 adc;
	/*select ch*/
	ADMUX=ADMUX&0xE0; //1110 0000
  dc:	97 b1       	in	r25, 0x07	; 7
  de:	90 7e       	andi	r25, 0xE0	; 224
  e0:	97 b9       	out	0x07, r25	; 7
	ADMUX=ADMUX|ch;
  e2:	97 b1       	in	r25, 0x07	; 7
  e4:	89 2b       	or	r24, r25
  e6:	87 b9       	out	0x07, r24	; 7
	
	/*start conversion*/
	SET_BIT(ADCSRA,ADSC);
  e8:	86 b1       	in	r24, 0x06	; 6
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	86 b9       	out	0x06, r24	; 6
	/*wait to end*/
	while(READ_BIT(ADCSRA,ADSC));
  ee:	36 99       	sbic	0x06, 6	; 6
  f0:	fe cf       	rjmp	.-4      	; 0xee <ADC_Read+0x12>
	/*read data*/
	adc=ADCL;
  f2:	24 b1       	in	r18, 0x04	; 4
	adc+=((ADCH)<<8);
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	98 2f       	mov	r25, r24
  fa:	88 27       	eor	r24, r24
	
	//adc=ADC;
	return adc;
}
  fc:	82 0f       	add	r24, r18
  fe:	91 1d       	adc	r25, r1
 100:	08 95       	ret

00000102 <DIO_InitPin>:
		case PD:
		value=PORTD;
		break;
	}
	return value;
}
 102:	98 2f       	mov	r25, r24
 104:	96 95       	lsr	r25
 106:	96 95       	lsr	r25
 108:	96 95       	lsr	r25
 10a:	87 70       	andi	r24, 0x07	; 7
 10c:	61 30       	cpi	r22, 0x01	; 1
 10e:	09 f4       	brne	.+2      	; 0x112 <DIO_InitPin+0x10>
 110:	51 c0       	rjmp	.+162    	; 0x1b4 <DIO_InitPin+0xb2>
 112:	20 f0       	brcs	.+8      	; 0x11c <DIO_InitPin+0x1a>
 114:	62 30       	cpi	r22, 0x02	; 2
 116:	09 f4       	brne	.+2      	; 0x11a <DIO_InitPin+0x18>
 118:	99 c0       	rjmp	.+306    	; 0x24c <DIO_InitPin+0x14a>
 11a:	08 95       	ret
 11c:	91 30       	cpi	r25, 0x01	; 1
 11e:	b9 f0       	breq	.+46     	; 0x14e <DIO_InitPin+0x4c>
 120:	28 f0       	brcs	.+10     	; 0x12c <DIO_InitPin+0x2a>
 122:	92 30       	cpi	r25, 0x02	; 2
 124:	29 f1       	breq	.+74     	; 0x170 <DIO_InitPin+0x6e>
 126:	93 30       	cpi	r25, 0x03	; 3
 128:	a1 f1       	breq	.+104    	; 0x192 <DIO_InitPin+0x90>
 12a:	08 95       	ret
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	a9 01       	movw	r20, r18
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_InitPin+0x36>
 134:	44 0f       	add	r20, r20
 136:	55 1f       	adc	r21, r21
 138:	8a 95       	dec	r24
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_InitPin+0x32>
 13c:	ca 01       	movw	r24, r20
 13e:	9a b3       	in	r25, 0x1a	; 26
 140:	98 2b       	or	r25, r24
 142:	9a bb       	out	0x1a, r25	; 26
 144:	9b b3       	in	r25, 0x1b	; 27
 146:	80 95       	com	r24
 148:	89 23       	and	r24, r25
 14a:	8b bb       	out	0x1b, r24	; 27
 14c:	08 95       	ret
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	a9 01       	movw	r20, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_InitPin+0x58>
 156:	44 0f       	add	r20, r20
 158:	55 1f       	adc	r21, r21
 15a:	8a 95       	dec	r24
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_InitPin+0x54>
 15e:	ca 01       	movw	r24, r20
 160:	97 b3       	in	r25, 0x17	; 23
 162:	98 2b       	or	r25, r24
 164:	97 bb       	out	0x17, r25	; 23
 166:	98 b3       	in	r25, 0x18	; 24
 168:	80 95       	com	r24
 16a:	89 23       	and	r24, r25
 16c:	88 bb       	out	0x18, r24	; 24
 16e:	08 95       	ret
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	a9 01       	movw	r20, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_InitPin+0x7a>
 178:	44 0f       	add	r20, r20
 17a:	55 1f       	adc	r21, r21
 17c:	8a 95       	dec	r24
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_InitPin+0x76>
 180:	ca 01       	movw	r24, r20
 182:	94 b3       	in	r25, 0x14	; 20
 184:	98 2b       	or	r25, r24
 186:	94 bb       	out	0x14, r25	; 20
 188:	95 b3       	in	r25, 0x15	; 21
 18a:	80 95       	com	r24
 18c:	89 23       	and	r24, r25
 18e:	85 bb       	out	0x15, r24	; 21
 190:	08 95       	ret
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	a9 01       	movw	r20, r18
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_InitPin+0x9c>
 19a:	44 0f       	add	r20, r20
 19c:	55 1f       	adc	r21, r21
 19e:	8a 95       	dec	r24
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_InitPin+0x98>
 1a2:	ca 01       	movw	r24, r20
 1a4:	91 b3       	in	r25, 0x11	; 17
 1a6:	98 2b       	or	r25, r24
 1a8:	91 bb       	out	0x11, r25	; 17
 1aa:	92 b3       	in	r25, 0x12	; 18
 1ac:	80 95       	com	r24
 1ae:	89 23       	and	r24, r25
 1b0:	82 bb       	out	0x12, r24	; 18
 1b2:	08 95       	ret
 1b4:	91 30       	cpi	r25, 0x01	; 1
 1b6:	b9 f0       	breq	.+46     	; 0x1e6 <DIO_InitPin+0xe4>
 1b8:	28 f0       	brcs	.+10     	; 0x1c4 <DIO_InitPin+0xc2>
 1ba:	92 30       	cpi	r25, 0x02	; 2
 1bc:	29 f1       	breq	.+74     	; 0x208 <DIO_InitPin+0x106>
 1be:	93 30       	cpi	r25, 0x03	; 3
 1c0:	a1 f1       	breq	.+104    	; 0x22a <DIO_InitPin+0x128>
 1c2:	08 95       	ret
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	a9 01       	movw	r20, r18
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_InitPin+0xce>
 1cc:	44 0f       	add	r20, r20
 1ce:	55 1f       	adc	r21, r21
 1d0:	8a 95       	dec	r24
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_InitPin+0xca>
 1d4:	ca 01       	movw	r24, r20
 1d6:	80 95       	com	r24
 1d8:	9a b3       	in	r25, 0x1a	; 26
 1da:	98 23       	and	r25, r24
 1dc:	9a bb       	out	0x1a, r25	; 26
 1de:	9b b3       	in	r25, 0x1b	; 27
 1e0:	89 23       	and	r24, r25
 1e2:	8b bb       	out	0x1b, r24	; 27
 1e4:	08 95       	ret
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	a9 01       	movw	r20, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_InitPin+0xf0>
 1ee:	44 0f       	add	r20, r20
 1f0:	55 1f       	adc	r21, r21
 1f2:	8a 95       	dec	r24
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_InitPin+0xec>
 1f6:	ca 01       	movw	r24, r20
 1f8:	80 95       	com	r24
 1fa:	97 b3       	in	r25, 0x17	; 23
 1fc:	98 23       	and	r25, r24
 1fe:	97 bb       	out	0x17, r25	; 23
 200:	98 b3       	in	r25, 0x18	; 24
 202:	89 23       	and	r24, r25
 204:	88 bb       	out	0x18, r24	; 24
 206:	08 95       	ret
 208:	21 e0       	ldi	r18, 0x01	; 1
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	a9 01       	movw	r20, r18
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_InitPin+0x112>
 210:	44 0f       	add	r20, r20
 212:	55 1f       	adc	r21, r21
 214:	8a 95       	dec	r24
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_InitPin+0x10e>
 218:	ca 01       	movw	r24, r20
 21a:	80 95       	com	r24
 21c:	94 b3       	in	r25, 0x14	; 20
 21e:	98 23       	and	r25, r24
 220:	94 bb       	out	0x14, r25	; 20
 222:	95 b3       	in	r25, 0x15	; 21
 224:	89 23       	and	r24, r25
 226:	85 bb       	out	0x15, r24	; 21
 228:	08 95       	ret
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	a9 01       	movw	r20, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_InitPin+0x134>
 232:	44 0f       	add	r20, r20
 234:	55 1f       	adc	r21, r21
 236:	8a 95       	dec	r24
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_InitPin+0x130>
 23a:	ca 01       	movw	r24, r20
 23c:	80 95       	com	r24
 23e:	91 b3       	in	r25, 0x11	; 17
 240:	98 23       	and	r25, r24
 242:	91 bb       	out	0x11, r25	; 17
 244:	92 b3       	in	r25, 0x12	; 18
 246:	89 23       	and	r24, r25
 248:	82 bb       	out	0x12, r24	; 18
 24a:	08 95       	ret
 24c:	91 30       	cpi	r25, 0x01	; 1
 24e:	c1 f0       	breq	.+48     	; 0x280 <DIO_InitPin+0x17e>
 250:	28 f0       	brcs	.+10     	; 0x25c <DIO_InitPin+0x15a>
 252:	92 30       	cpi	r25, 0x02	; 2
 254:	39 f1       	breq	.+78     	; 0x2a4 <DIO_InitPin+0x1a2>
 256:	93 30       	cpi	r25, 0x03	; 3
 258:	b9 f1       	breq	.+110    	; 0x2c8 <DIO_InitPin+0x1c6>
 25a:	08 95       	ret
 25c:	21 e0       	ldi	r18, 0x01	; 1
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	a9 01       	movw	r20, r18
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_InitPin+0x166>
 264:	44 0f       	add	r20, r20
 266:	55 1f       	adc	r21, r21
 268:	8a 95       	dec	r24
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_InitPin+0x162>
 26c:	ca 01       	movw	r24, r20
 26e:	9a b3       	in	r25, 0x1a	; 26
 270:	28 2f       	mov	r18, r24
 272:	20 95       	com	r18
 274:	92 23       	and	r25, r18
 276:	9a bb       	out	0x1a, r25	; 26
 278:	9b b3       	in	r25, 0x1b	; 27
 27a:	89 2b       	or	r24, r25
 27c:	8b bb       	out	0x1b, r24	; 27
 27e:	08 95       	ret
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	a9 01       	movw	r20, r18
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_InitPin+0x18a>
 288:	44 0f       	add	r20, r20
 28a:	55 1f       	adc	r21, r21
 28c:	8a 95       	dec	r24
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_InitPin+0x186>
 290:	ca 01       	movw	r24, r20
 292:	97 b3       	in	r25, 0x17	; 23
 294:	28 2f       	mov	r18, r24
 296:	20 95       	com	r18
 298:	92 23       	and	r25, r18
 29a:	97 bb       	out	0x17, r25	; 23
 29c:	98 b3       	in	r25, 0x18	; 24
 29e:	89 2b       	or	r24, r25
 2a0:	88 bb       	out	0x18, r24	; 24
 2a2:	08 95       	ret
 2a4:	21 e0       	ldi	r18, 0x01	; 1
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	a9 01       	movw	r20, r18
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_InitPin+0x1ae>
 2ac:	44 0f       	add	r20, r20
 2ae:	55 1f       	adc	r21, r21
 2b0:	8a 95       	dec	r24
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_InitPin+0x1aa>
 2b4:	ca 01       	movw	r24, r20
 2b6:	94 b3       	in	r25, 0x14	; 20
 2b8:	28 2f       	mov	r18, r24
 2ba:	20 95       	com	r18
 2bc:	92 23       	and	r25, r18
 2be:	94 bb       	out	0x14, r25	; 20
 2c0:	95 b3       	in	r25, 0x15	; 21
 2c2:	89 2b       	or	r24, r25
 2c4:	85 bb       	out	0x15, r24	; 21
 2c6:	08 95       	ret
 2c8:	21 e0       	ldi	r18, 0x01	; 1
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	a9 01       	movw	r20, r18
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_InitPin+0x1d2>
 2d0:	44 0f       	add	r20, r20
 2d2:	55 1f       	adc	r21, r21
 2d4:	8a 95       	dec	r24
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_InitPin+0x1ce>
 2d8:	ca 01       	movw	r24, r20
 2da:	91 b3       	in	r25, 0x11	; 17
 2dc:	28 2f       	mov	r18, r24
 2de:	20 95       	com	r18
 2e0:	92 23       	and	r25, r18
 2e2:	91 bb       	out	0x11, r25	; 17
 2e4:	92 b3       	in	r25, 0x12	; 18
 2e6:	89 2b       	or	r24, r25
 2e8:	82 bb       	out	0x12, r24	; 18
 2ea:	08 95       	ret

000002ec <DIO_WritePin>:
 2ec:	98 2f       	mov	r25, r24
 2ee:	96 95       	lsr	r25
 2f0:	96 95       	lsr	r25
 2f2:	96 95       	lsr	r25
 2f4:	87 70       	andi	r24, 0x07	; 7
 2f6:	61 30       	cpi	r22, 0x01	; 1
 2f8:	e1 f5       	brne	.+120    	; 0x372 <DIO_WritePin+0x86>
 2fa:	91 30       	cpi	r25, 0x01	; 1
 2fc:	99 f0       	breq	.+38     	; 0x324 <DIO_WritePin+0x38>
 2fe:	28 f0       	brcs	.+10     	; 0x30a <DIO_WritePin+0x1e>
 300:	92 30       	cpi	r25, 0x02	; 2
 302:	e9 f0       	breq	.+58     	; 0x33e <DIO_WritePin+0x52>
 304:	93 30       	cpi	r25, 0x03	; 3
 306:	41 f1       	breq	.+80     	; 0x358 <DIO_WritePin+0x6c>
 308:	08 95       	ret
 30a:	21 e0       	ldi	r18, 0x01	; 1
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	a9 01       	movw	r20, r18
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_WritePin+0x2a>
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	8a 95       	dec	r24
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_WritePin+0x26>
 31a:	ca 01       	movw	r24, r20
 31c:	9b b3       	in	r25, 0x1b	; 27
 31e:	89 2b       	or	r24, r25
 320:	8b bb       	out	0x1b, r24	; 27
 322:	08 95       	ret
 324:	21 e0       	ldi	r18, 0x01	; 1
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	a9 01       	movw	r20, r18
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_WritePin+0x44>
 32c:	44 0f       	add	r20, r20
 32e:	55 1f       	adc	r21, r21
 330:	8a 95       	dec	r24
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_WritePin+0x40>
 334:	ca 01       	movw	r24, r20
 336:	98 b3       	in	r25, 0x18	; 24
 338:	89 2b       	or	r24, r25
 33a:	88 bb       	out	0x18, r24	; 24
 33c:	08 95       	ret
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	a9 01       	movw	r20, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_WritePin+0x5e>
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	8a 95       	dec	r24
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_WritePin+0x5a>
 34e:	ca 01       	movw	r24, r20
 350:	95 b3       	in	r25, 0x15	; 21
 352:	89 2b       	or	r24, r25
 354:	85 bb       	out	0x15, r24	; 21
 356:	08 95       	ret
 358:	21 e0       	ldi	r18, 0x01	; 1
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	a9 01       	movw	r20, r18
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_WritePin+0x78>
 360:	44 0f       	add	r20, r20
 362:	55 1f       	adc	r21, r21
 364:	8a 95       	dec	r24
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_WritePin+0x74>
 368:	ca 01       	movw	r24, r20
 36a:	92 b3       	in	r25, 0x12	; 18
 36c:	89 2b       	or	r24, r25
 36e:	82 bb       	out	0x12, r24	; 18
 370:	08 95       	ret
 372:	61 11       	cpse	r22, r1
 374:	3f c0       	rjmp	.+126    	; 0x3f4 <DIO_WritePin+0x108>
 376:	91 30       	cpi	r25, 0x01	; 1
 378:	a1 f0       	breq	.+40     	; 0x3a2 <DIO_WritePin+0xb6>
 37a:	28 f0       	brcs	.+10     	; 0x386 <DIO_WritePin+0x9a>
 37c:	92 30       	cpi	r25, 0x02	; 2
 37e:	f9 f0       	breq	.+62     	; 0x3be <DIO_WritePin+0xd2>
 380:	93 30       	cpi	r25, 0x03	; 3
 382:	59 f1       	breq	.+86     	; 0x3da <DIO_WritePin+0xee>
 384:	08 95       	ret
 386:	21 e0       	ldi	r18, 0x01	; 1
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	a9 01       	movw	r20, r18
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_WritePin+0xa6>
 38e:	44 0f       	add	r20, r20
 390:	55 1f       	adc	r21, r21
 392:	8a 95       	dec	r24
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_WritePin+0xa2>
 396:	ca 01       	movw	r24, r20
 398:	9b b3       	in	r25, 0x1b	; 27
 39a:	80 95       	com	r24
 39c:	89 23       	and	r24, r25
 39e:	8b bb       	out	0x1b, r24	; 27
 3a0:	08 95       	ret
 3a2:	21 e0       	ldi	r18, 0x01	; 1
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	a9 01       	movw	r20, r18
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_WritePin+0xc2>
 3aa:	44 0f       	add	r20, r20
 3ac:	55 1f       	adc	r21, r21
 3ae:	8a 95       	dec	r24
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_WritePin+0xbe>
 3b2:	ca 01       	movw	r24, r20
 3b4:	98 b3       	in	r25, 0x18	; 24
 3b6:	80 95       	com	r24
 3b8:	89 23       	and	r24, r25
 3ba:	88 bb       	out	0x18, r24	; 24
 3bc:	08 95       	ret
 3be:	21 e0       	ldi	r18, 0x01	; 1
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	a9 01       	movw	r20, r18
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_WritePin+0xde>
 3c6:	44 0f       	add	r20, r20
 3c8:	55 1f       	adc	r21, r21
 3ca:	8a 95       	dec	r24
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_WritePin+0xda>
 3ce:	ca 01       	movw	r24, r20
 3d0:	95 b3       	in	r25, 0x15	; 21
 3d2:	80 95       	com	r24
 3d4:	89 23       	and	r24, r25
 3d6:	85 bb       	out	0x15, r24	; 21
 3d8:	08 95       	ret
 3da:	21 e0       	ldi	r18, 0x01	; 1
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	a9 01       	movw	r20, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_WritePin+0xfa>
 3e2:	44 0f       	add	r20, r20
 3e4:	55 1f       	adc	r21, r21
 3e6:	8a 95       	dec	r24
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_WritePin+0xf6>
 3ea:	ca 01       	movw	r24, r20
 3ec:	92 b3       	in	r25, 0x12	; 18
 3ee:	80 95       	com	r24
 3f0:	89 23       	and	r24, r25
 3f2:	82 bb       	out	0x12, r24	; 18
 3f4:	08 95       	ret

000003f6 <DIO_Init>:

void DIO_Init(void)
{
 3f6:	cf 93       	push	r28
	DIO_Pin_type i=PINA0;
	for(i=PINA0;i<TOTAL_PINS;i++)
 3f8:	c0 e0       	ldi	r28, 0x00	; 0
 3fa:	09 c0       	rjmp	.+18     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	{
		DIO_InitPin(i,PinStatusArray[i]);
 3fc:	ec 2f       	mov	r30, r28
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	e0 5a       	subi	r30, 0xA0	; 160
 402:	ff 4f       	sbci	r31, 0xFF	; 255
 404:	60 81       	ld	r22, Z
 406:	8c 2f       	mov	r24, r28
 408:	0e 94 81 00 	call	0x102	; 0x102 <DIO_InitPin>
}

void DIO_Init(void)
{
	DIO_Pin_type i=PINA0;
	for(i=PINA0;i<TOTAL_PINS;i++)
 40c:	cf 5f       	subi	r28, 0xFF	; 255
 40e:	c0 32       	cpi	r28, 0x20	; 32
 410:	a8 f3       	brcs	.-22     	; 0x3fc <DIO_Init+0x6>
	{
		DIO_InitPin(i,PinStatusArray[i]);
		
	}
}
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <FIREALARM_rx>:

volatile u8 temp;
volatile u16 pressure;
void FIREALARM_rx(void)
{
	u8 rec =UART_ReceieveNoBlock();
 416:	0e 94 3e 03 	call	0x67c	; 0x67c <UART_ReceieveNoBlock>
	if(rec==100)
 41a:	84 36       	cpi	r24, 0x64	; 100
 41c:	51 f4       	brne	.+20     	; 0x432 <FIREALARM_rx+0x1c>
	{
		UART_Send(temp);
 41e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <temp>
 422:	0e 94 3a 03 	call	0x674	; 0x674 <UART_Send>
		UART_Send(pressure);
 426:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <pressure>
 42a:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <pressure+0x1>
 42e:	0e 94 3a 03 	call	0x674	; 0x674 <UART_Send>
 432:	08 95       	ret

00000434 <FIREALARM_voidInit>:
	}
	
}
void FIREALARM_voidInit(void)
{
	DIO_Init();
 434:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_Init>
	LCD_Init();
 438:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_Init>
	ADC_Init(VREF_AREF,ADC_SCALER_64);
 43c:	66 e0       	ldi	r22, 0x06	; 6
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
	UART_Init();
 444:	0e 94 2e 03 	call	0x65c	; 0x65c <UART_Init>
	UART_Rx_SetCallBack(FIREALARM_rx);
 448:	8b e0       	ldi	r24, 0x0B	; 11
 44a:	92 e0       	ldi	r25, 0x02	; 2
 44c:	0e 94 44 03 	call	0x688	; 0x688 <UART_Rx_SetCallBack>
	UART_Rx_InterruptEnable();
 450:	0e 94 40 03 	call	0x680	; 0x680 <UART_Rx_InterruptEnable>
	sei();
 454:	78 94       	sei
 456:	08 95       	ret

00000458 <FIREALARM_voidRunnale>:
}

void FIREALARM_voidRunnale(void)
{
	LCD_Clear();
 458:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_Clear>
	cli();
 45c:	f8 94       	cli
	pressure=PRESSURE_Read();
 45e:	0e 94 0a 03 	call	0x614	; 0x614 <PRESSURE_Read>
 462:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <pressure+0x1>
 466:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <pressure>
	temp=TEMP_Read();
 46a:	0e 94 1e 03 	call	0x63c	; 0x63c <TEMP_Read>
 46e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <temp>
	temp=temp/2;
 472:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <temp>
 476:	86 95       	lsr	r24
 478:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <temp>
	pressure=pressure/10;
 47c:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <pressure>
 480:	30 91 86 00 	lds	r19, 0x0086	; 0x800086 <pressure+0x1>
 484:	ad ec       	ldi	r26, 0xCD	; 205
 486:	bc ec       	ldi	r27, 0xCC	; 204
 488:	0e 94 bd 03 	call	0x77a	; 0x77a <__umulhisi3>
 48c:	96 95       	lsr	r25
 48e:	87 95       	ror	r24
 490:	96 95       	lsr	r25
 492:	87 95       	ror	r24
 494:	96 95       	lsr	r25
 496:	87 95       	ror	r24
 498:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <pressure+0x1>
 49c:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <pressure>
	sei();
 4a0:	78 94       	sei
	//fine state
	if(temp<45&&pressure<40)
 4a2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <temp>
 4a6:	8d 32       	cpi	r24, 0x2D	; 45
 4a8:	98 f4       	brcc	.+38     	; 0x4d0 <FIREALARM_voidRunnale+0x78>
 4aa:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <pressure>
 4ae:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <pressure+0x1>
 4b2:	88 97       	sbiw	r24, 0x28	; 40
 4b4:	68 f4       	brcc	.+26     	; 0x4d0 <FIREALARM_voidRunnale+0x78>
	{
		DIO_WritePin(PINB0,HIGH);
 4b6:	61 e0       	ldi	r22, 0x01	; 1
 4b8:	88 e0       	ldi	r24, 0x08	; 8
 4ba:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_WritePin>
		DIO_WritePin(PINB1,LOW);
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	89 e0       	ldi	r24, 0x09	; 9
 4c2:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_WritePin>
		DIO_WritePin(PINB2,LOW);
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	8a e0       	ldi	r24, 0x0A	; 10
 4ca:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_WritePin>
 4ce:	08 95       	ret
	}
	else if(temp>48||pressure>43)
 4d0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <temp>
 4d4:	81 33       	cpi	r24, 0x31	; 49
 4d6:	30 f4       	brcc	.+12     	; 0x4e4 <FIREALARM_voidRunnale+0x8c>
 4d8:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <pressure>
 4dc:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <pressure+0x1>
 4e0:	8c 97       	sbiw	r24, 0x2c	; 44
 4e2:	60 f0       	brcs	.+24     	; 0x4fc <FIREALARM_voidRunnale+0xa4>
	{
		DIO_WritePin(PINB0,LOW);
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	88 e0       	ldi	r24, 0x08	; 8
 4e8:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_WritePin>
		DIO_WritePin(PINB1,HIGH);
 4ec:	61 e0       	ldi	r22, 0x01	; 1
 4ee:	89 e0       	ldi	r24, 0x09	; 9
 4f0:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_WritePin>
		DIO_WritePin(PINB2,HIGH);
 4f4:	61 e0       	ldi	r22, 0x01	; 1
 4f6:	8a e0       	ldi	r24, 0x0A	; 10
 4f8:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_WritePin>
 4fc:	08 95       	ret

000004fe <LCD_WriteCommand>:
	for (j=i-1;j>=0;j--)
	{
		LCD_WriteChar(str[j]);
	}

}
 4fe:	cf 93       	push	r28
 500:	c8 2f       	mov	r28, r24
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	86 e1       	ldi	r24, 0x16	; 22
 506:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_WritePin>
 50a:	6c 2f       	mov	r22, r28
 50c:	66 1f       	adc	r22, r22
 50e:	66 27       	eor	r22, r22
 510:	66 1f       	adc	r22, r22
 512:	85 e1       	ldi	r24, 0x15	; 21
 514:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_WritePin>
 518:	c6 fb       	bst	r28, 6
 51a:	66 27       	eor	r22, r22
 51c:	60 f9       	bld	r22, 0
 51e:	84 e1       	ldi	r24, 0x14	; 20
 520:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_WritePin>
 524:	c5 fb       	bst	r28, 5
 526:	66 27       	eor	r22, r22
 528:	60 f9       	bld	r22, 0
 52a:	83 e1       	ldi	r24, 0x13	; 19
 52c:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_WritePin>
 530:	c4 fb       	bst	r28, 4
 532:	66 27       	eor	r22, r22
 534:	60 f9       	bld	r22, 0
 536:	82 e1       	ldi	r24, 0x12	; 18
 538:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_WritePin>
 53c:	61 e0       	ldi	r22, 0x01	; 1
 53e:	87 e1       	ldi	r24, 0x17	; 23
 540:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_WritePin>
 544:	89 ef       	ldi	r24, 0xF9	; 249
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <LCD_WriteCommand+0x4a>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <LCD_WriteCommand+0x50>
 54e:	00 00       	nop
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	87 e1       	ldi	r24, 0x17	; 23
 554:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_WritePin>
 558:	89 ef       	ldi	r24, 0xF9	; 249
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	01 97       	sbiw	r24, 0x01	; 1
 55e:	f1 f7       	brne	.-4      	; 0x55c <LCD_WriteCommand+0x5e>
 560:	00 c0       	rjmp	.+0      	; 0x562 <LCD_WriteCommand+0x64>
 562:	00 00       	nop
 564:	c3 fb       	bst	r28, 3
 566:	66 27       	eor	r22, r22
 568:	60 f9       	bld	r22, 0
 56a:	85 e1       	ldi	r24, 0x15	; 21
 56c:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_WritePin>
 570:	c2 fb       	bst	r28, 2
 572:	66 27       	eor	r22, r22
 574:	60 f9       	bld	r22, 0
 576:	84 e1       	ldi	r24, 0x14	; 20
 578:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_WritePin>
 57c:	c1 fb       	bst	r28, 1
 57e:	66 27       	eor	r22, r22
 580:	60 f9       	bld	r22, 0
 582:	83 e1       	ldi	r24, 0x13	; 19
 584:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_WritePin>
 588:	6c 2f       	mov	r22, r28
 58a:	61 70       	andi	r22, 0x01	; 1
 58c:	82 e1       	ldi	r24, 0x12	; 18
 58e:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_WritePin>
 592:	61 e0       	ldi	r22, 0x01	; 1
 594:	87 e1       	ldi	r24, 0x17	; 23
 596:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_WritePin>
 59a:	89 ef       	ldi	r24, 0xF9	; 249
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	01 97       	sbiw	r24, 0x01	; 1
 5a0:	f1 f7       	brne	.-4      	; 0x59e <LCD_WriteCommand+0xa0>
 5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <LCD_WriteCommand+0xa6>
 5a4:	00 00       	nop
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	87 e1       	ldi	r24, 0x17	; 23
 5aa:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_WritePin>
 5ae:	89 ef       	ldi	r24, 0xF9	; 249
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	01 97       	sbiw	r24, 0x01	; 1
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <LCD_WriteCommand+0xb4>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <LCD_WriteCommand+0xba>
 5b8:	00 00       	nop
 5ba:	cf 91       	pop	r28
 5bc:	08 95       	ret

000005be <LCD_Init>:
 5be:	83 ed       	ldi	r24, 0xD3	; 211
 5c0:	90 e3       	ldi	r25, 0x30	; 48
 5c2:	01 97       	sbiw	r24, 0x01	; 1
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <LCD_Init+0x4>
 5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <LCD_Init+0xa>
 5c8:	00 00       	nop
 5ca:	82 e0       	ldi	r24, 0x02	; 2
 5cc:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_WriteCommand>
 5d0:	88 e2       	ldi	r24, 0x28	; 40
 5d2:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_WriteCommand>
 5d6:	8c e0       	ldi	r24, 0x0C	; 12
 5d8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_WriteCommand>
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_WriteCommand>
 5e2:	89 ef       	ldi	r24, 0xF9	; 249
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <LCD_Init+0x28>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <LCD_Init+0x2e>
 5ec:	00 00       	nop
 5ee:	86 e0       	ldi	r24, 0x06	; 6
 5f0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_WriteCommand>
 5f4:	08 95       	ret

000005f6 <LCD_Clear>:

void LCD_Clear(void)
{
	LCD_WriteCommand(0x01);//clear
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_WriteCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5fc:	89 ef       	ldi	r24, 0xF9	; 249
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	01 97       	sbiw	r24, 0x01	; 1
 602:	f1 f7       	brne	.-4      	; 0x600 <LCD_Clear+0xa>
 604:	00 c0       	rjmp	.+0      	; 0x606 <LCD_Clear+0x10>
 606:	00 00       	nop
 608:	08 95       	ret

0000060a <main>:


int main(void)
{
 FIREALARM_voidInit();
 60a:	0e 94 1a 02 	call	0x434	; 0x434 <FIREALARM_voidInit>
    while (1) 
    {
		FIREALARM_voidRunnale();
 60e:	0e 94 2c 02 	call	0x458	; 0x458 <FIREALARM_voidRunnale>
 612:	fd cf       	rjmp	.-6      	; 0x60e <main+0x4>

00000614 <PRESSURE_Read>:

u16 PRESSURE_Read()
{
	u16 adc;
	u16 pressure;
	adc=ADC_Read(MPX4115_CH);
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	0e 94 6e 00 	call	0xdc	; 0xdc <ADC_Read>
	pressure=(((u32)(adc-55)*1000)/921)+150;
 61a:	9c 01       	movw	r18, r24
 61c:	27 53       	subi	r18, 0x37	; 55
 61e:	31 09       	sbc	r19, r1
 620:	a8 ee       	ldi	r26, 0xE8	; 232
 622:	b3 e0       	ldi	r27, 0x03	; 3
 624:	0e 94 bd 03 	call	0x77a	; 0x77a <__umulhisi3>
 628:	29 e9       	ldi	r18, 0x99	; 153
 62a:	33 e0       	ldi	r19, 0x03	; 3
 62c:	40 e0       	ldi	r20, 0x00	; 0
 62e:	50 e0       	ldi	r21, 0x00	; 0
 630:	0e 94 9b 03 	call	0x736	; 0x736 <__udivmodsi4>
	return pressure;
}
 634:	c9 01       	movw	r24, r18
 636:	8a 56       	subi	r24, 0x6A	; 106
 638:	9f 4f       	sbci	r25, 0xFF	; 255
 63a:	08 95       	ret

0000063c <TEMP_Read>:

/*1->.5v*/
u16 TEMP_Read(void)
{
	u16 temp ,adc;
	adc=ADC_Read(LM35_CH);
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	0e 94 6e 00 	call	0xdc	; 0xdc <ADC_Read>
	temp=(adc*(u32)300)/307;
 642:	9c 01       	movw	r18, r24
 644:	ac e2       	ldi	r26, 0x2C	; 44
 646:	b1 e0       	ldi	r27, 0x01	; 1
 648:	0e 94 bd 03 	call	0x77a	; 0x77a <__umulhisi3>
 64c:	23 e3       	ldi	r18, 0x33	; 51
 64e:	31 e0       	ldi	r19, 0x01	; 1
 650:	40 e0       	ldi	r20, 0x00	; 0
 652:	50 e0       	ldi	r21, 0x00	; 0
 654:	0e 94 9b 03 	call	0x736	; 0x736 <__udivmodsi4>
	return temp;
 658:	c9 01       	movw	r24, r18
 65a:	08 95       	ret

0000065c <UART_Init>:
{
	UART_Rx_Fptr=LocalFptr;
}
void UART_Tx_SetCallBack(void(*LocalFptr)(void))
{
	UART_Tx_Fptr=LocalFptr;
 65c:	8b b1       	in	r24, 0x0b	; 11
 65e:	8d 7f       	andi	r24, 0xFD	; 253
 660:	8b b9       	out	0x0b, r24	; 11
 662:	83 e3       	ldi	r24, 0x33	; 51
 664:	89 b9       	out	0x09, r24	; 9
 666:	8a b1       	in	r24, 0x0a	; 10
 668:	80 61       	ori	r24, 0x10	; 16
 66a:	8a b9       	out	0x0a, r24	; 10
 66c:	8a b1       	in	r24, 0x0a	; 10
 66e:	88 60       	ori	r24, 0x08	; 8
 670:	8a b9       	out	0x0a, r24	; 10
 672:	08 95       	ret

00000674 <UART_Send>:
 674:	5d 9b       	sbis	0x0b, 5	; 11
 676:	fe cf       	rjmp	.-4      	; 0x674 <UART_Send>
 678:	8c b9       	out	0x0c, r24	; 12
 67a:	08 95       	ret

0000067c <UART_ReceieveNoBlock>:
 67c:	8c b1       	in	r24, 0x0c	; 12
 67e:	08 95       	ret

00000680 <UART_Rx_InterruptEnable>:
 680:	8a b1       	in	r24, 0x0a	; 10
 682:	80 68       	ori	r24, 0x80	; 128
 684:	8a b9       	out	0x0a, r24	; 10
 686:	08 95       	ret

00000688 <UART_Rx_SetCallBack>:
 688:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <UART_Rx_Fptr+0x1>
 68c:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <UART_Rx_Fptr>
 690:	08 95       	ret

00000692 <__vector_13>:
}

ISR(UART_RX_vect)
{
 692:	1f 92       	push	r1
 694:	0f 92       	push	r0
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	0f 92       	push	r0
 69a:	11 24       	eor	r1, r1
 69c:	2f 93       	push	r18
 69e:	3f 93       	push	r19
 6a0:	4f 93       	push	r20
 6a2:	5f 93       	push	r21
 6a4:	6f 93       	push	r22
 6a6:	7f 93       	push	r23
 6a8:	8f 93       	push	r24
 6aa:	9f 93       	push	r25
 6ac:	af 93       	push	r26
 6ae:	bf 93       	push	r27
 6b0:	ef 93       	push	r30
 6b2:	ff 93       	push	r31
	if(UART_Rx_Fptr!=NULL_PTR)
 6b4:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <UART_Rx_Fptr>
 6b8:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <UART_Rx_Fptr+0x1>
 6bc:	30 97       	sbiw	r30, 0x00	; 0
 6be:	09 f0       	breq	.+2      	; 0x6c2 <__vector_13+0x30>
	{
		UART_Rx_Fptr();
 6c0:	09 95       	icall
	}
}
 6c2:	ff 91       	pop	r31
 6c4:	ef 91       	pop	r30
 6c6:	bf 91       	pop	r27
 6c8:	af 91       	pop	r26
 6ca:	9f 91       	pop	r25
 6cc:	8f 91       	pop	r24
 6ce:	7f 91       	pop	r23
 6d0:	6f 91       	pop	r22
 6d2:	5f 91       	pop	r21
 6d4:	4f 91       	pop	r20
 6d6:	3f 91       	pop	r19
 6d8:	2f 91       	pop	r18
 6da:	0f 90       	pop	r0
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	0f 90       	pop	r0
 6e0:	1f 90       	pop	r1
 6e2:	18 95       	reti

000006e4 <__vector_15>:

ISR(UART_TX_vect)
{
 6e4:	1f 92       	push	r1
 6e6:	0f 92       	push	r0
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	0f 92       	push	r0
 6ec:	11 24       	eor	r1, r1
 6ee:	2f 93       	push	r18
 6f0:	3f 93       	push	r19
 6f2:	4f 93       	push	r20
 6f4:	5f 93       	push	r21
 6f6:	6f 93       	push	r22
 6f8:	7f 93       	push	r23
 6fa:	8f 93       	push	r24
 6fc:	9f 93       	push	r25
 6fe:	af 93       	push	r26
 700:	bf 93       	push	r27
 702:	ef 93       	push	r30
 704:	ff 93       	push	r31
	if(UART_Tx_Fptr!=NULL_PTR)
 706:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__data_end>
 70a:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <__data_end+0x1>
 70e:	30 97       	sbiw	r30, 0x00	; 0
 710:	09 f0       	breq	.+2      	; 0x714 <__vector_15+0x30>
	{
		UART_Tx_Fptr();
 712:	09 95       	icall
	}
 714:	ff 91       	pop	r31
 716:	ef 91       	pop	r30
 718:	bf 91       	pop	r27
 71a:	af 91       	pop	r26
 71c:	9f 91       	pop	r25
 71e:	8f 91       	pop	r24
 720:	7f 91       	pop	r23
 722:	6f 91       	pop	r22
 724:	5f 91       	pop	r21
 726:	4f 91       	pop	r20
 728:	3f 91       	pop	r19
 72a:	2f 91       	pop	r18
 72c:	0f 90       	pop	r0
 72e:	0f be       	out	0x3f, r0	; 63
 730:	0f 90       	pop	r0
 732:	1f 90       	pop	r1
 734:	18 95       	reti

00000736 <__udivmodsi4>:
 736:	a1 e2       	ldi	r26, 0x21	; 33
 738:	1a 2e       	mov	r1, r26
 73a:	aa 1b       	sub	r26, r26
 73c:	bb 1b       	sub	r27, r27
 73e:	fd 01       	movw	r30, r26
 740:	0d c0       	rjmp	.+26     	; 0x75c <__udivmodsi4_ep>

00000742 <__udivmodsi4_loop>:
 742:	aa 1f       	adc	r26, r26
 744:	bb 1f       	adc	r27, r27
 746:	ee 1f       	adc	r30, r30
 748:	ff 1f       	adc	r31, r31
 74a:	a2 17       	cp	r26, r18
 74c:	b3 07       	cpc	r27, r19
 74e:	e4 07       	cpc	r30, r20
 750:	f5 07       	cpc	r31, r21
 752:	20 f0       	brcs	.+8      	; 0x75c <__udivmodsi4_ep>
 754:	a2 1b       	sub	r26, r18
 756:	b3 0b       	sbc	r27, r19
 758:	e4 0b       	sbc	r30, r20
 75a:	f5 0b       	sbc	r31, r21

0000075c <__udivmodsi4_ep>:
 75c:	66 1f       	adc	r22, r22
 75e:	77 1f       	adc	r23, r23
 760:	88 1f       	adc	r24, r24
 762:	99 1f       	adc	r25, r25
 764:	1a 94       	dec	r1
 766:	69 f7       	brne	.-38     	; 0x742 <__udivmodsi4_loop>
 768:	60 95       	com	r22
 76a:	70 95       	com	r23
 76c:	80 95       	com	r24
 76e:	90 95       	com	r25
 770:	9b 01       	movw	r18, r22
 772:	ac 01       	movw	r20, r24
 774:	bd 01       	movw	r22, r26
 776:	cf 01       	movw	r24, r30
 778:	08 95       	ret

0000077a <__umulhisi3>:
 77a:	a2 9f       	mul	r26, r18
 77c:	b0 01       	movw	r22, r0
 77e:	b3 9f       	mul	r27, r19
 780:	c0 01       	movw	r24, r0
 782:	a3 9f       	mul	r26, r19
 784:	70 0d       	add	r23, r0
 786:	81 1d       	adc	r24, r1
 788:	11 24       	eor	r1, r1
 78a:	91 1d       	adc	r25, r1
 78c:	b2 9f       	mul	r27, r18
 78e:	70 0d       	add	r23, r0
 790:	81 1d       	adc	r24, r1
 792:	11 24       	eor	r1, r1
 794:	91 1d       	adc	r25, r1
 796:	08 95       	ret

00000798 <_exit>:
 798:	f8 94       	cli

0000079a <__stop_program>:
 79a:	ff cf       	rjmp	.-2      	; 0x79a <__stop_program>
